extensions.json

{
    "recommendations": [
        "angular.ng-template",
        "editorconfig.editorconfig",
        "dbaeumer.vscode-eslint",
        "ecmel.vscode-html-css",
        "humao.rest-client"
    ]
}


settings.json

{
  "editor.linkedEditing": true,
  "workbench.editor.wrapTabs": true,
  "workbench.editor.decorations.colors": true,
  "workbench.editor.decorations.badges": true,
  "breadcrumbs.enabled": true,
  "html.format.wrapAttributes": "force-aligned",
  "explorer.openEditors.visible": 0,
  "editor.formatOnSave": true,
  "editor.fontLigatures": false,
  "files.autoSave": "onFocusChange",
  "typescript.check.npmIsInstalled": true,
  "editor.snippetSuggestions": "top",
  "workbench.editor.labelFormat": "medium",
  "editor.minimap.enabled": false,
  "window.zoomLevel": 0,
  "git.enableSmartCommit": true,
  "git.autofetch": true,
  "eslint.rules.customizations": [
    {
      "rule": "*",
      "severity": "warn"
    }
  ],
  "workbench.colorCustomizations": {
    "editorIndentGuide.activeBackground": "#ff0000"
  },
  "editor.codeActionsOnSave": {
    "source.organizeImports": false,
    "source.fixAll": true,
    "eslint.autoFixOnSave": true /* already set with source.fixAll, but here to document */
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "terminal.integrated.fontFamily": "monospace",
  "workbench.sideBar.location": "right",
  "explorer.confirmDelete": false,
  "eslint.quiet": true,
  "workbench.tree.indent": 30
}


typescript.code-snippets

{
	"NGRX Root Reducer": {
		"prefix": "ngrootreducer",
		"body": [
			"import { ActionReducerMap } from '@ngrx/store';",
			"",
			"export interface $1 {",
			"",
			"}",
			"",
			"export const reducers: ActionReducerMap<$1> = {",
			"",
			"};",
			"$0"
		],
		"description": "Root Reducer for NGRX Store"
	},
	"NGRX Reducer": {
		"prefix": "ngrxreducer",
		"body": [
			"import { EntityState, createEntityAdapter } from '@ngrx/entity';",
			"import { createReducer, Action } from '@ngrx/store';",
			"",
			"export interface ${1:EntityInterface} {",
			"",
			"}",
			"",
			"export interface ${2:State} extends EntityState<$1> {",
			"",
			"}",
			"",
			"export const adapter = createEntityAdapter<$1>();",
			"",
			"const initialState = adapter.getInitialState();",
			"",
			"const reducerFunction = createReducer(",
			"  initialState",
			");",
			"",
			"export function reducer(state: $2 = initialState, action: Action): $2 {",
			"  return reducerFunction(state, action);",
			"}",
			"",
			"",
			"",
			""
		],
		"description": "A branch reducer"
	},
	"NGRX Empty Action": {
		"prefix": "ngrxactionempty",
		"body": [
			"export const ${1:actionCreator} = createAction(",
			"  '[${2:feature}] ${3:action name}'",
			");"
		],
		"description": "An Empty Action"
	},
	"NGRX Props Action": {
		"prefix": "ngrxactionprops",
		"body": [
			"export const ${1:actionCreator} = createAction(",
			"  '[${2:feature}] ${3:action name}',",
			"  props<{${0:props}}>()",
			");"
		],
		"description": "An Action With Properties"
	},
	"NGRX Function Action": {
		"prefix": "ngrxactionfunction",
		"body": [
			"export const ${1:actionCreator} = createAction(",
			"  '[${2:feature}] ${3:action name}',",
			"  ({${4:args}}: { ${5:interface}}) => ({",
			"   $0",
			"})",
			");"
		],
		"description": "An Action With Function"
	},
	"jasmine describe": {
		"prefix": "desc",
		"body": [
			"describe('${1:what}', () => {\r",
			"\r$0",
			"});"
		],
		"description": "jasmine describe"
	},
	"jasmine it": {
		"prefix": "it",
		"body": [
			"    it('${1:what}', () => {\r",
			"        $0\r",
			"    });"
		],
		"description": "jasmine it"
	}
}